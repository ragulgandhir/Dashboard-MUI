{"ast":null,"code":"var _jsxFileName = \"/var/www/html/DashBoard/client/src/Components/authjwt/ProtectedRoute.js\";\n// import React from \"react\";\n// import { Route, Navigate } from \"react-router-dom\";\n// const ProtectedRoute = ({ component: Component, ...rest }) => {\n//   function hasJWT() {\n//     let flag = false;\n//     //check user has JWT token\n//     localStorage.getItem(\"token\") ? (flag = true) : (flag = false);\n//     return flag;\n//   }\n//   return (\n//     <Route\n//       {...rest}\n//       render={(props) =>\n//         hasJWT() ? (\n//           <Component {...props} />\n//         ) : (\n//           <Navigate to={{ pathname: \"/\" }} />\n//         )\n//       }\n//     />\n//   );\n// };\n// export default ProtectedRoute;\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport Cookies from \"universal-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cookies = new Cookies(); // receives component and any other props represented by ...rest\n\nexport default function ProtectedRoutes(_ref) {\n  let {\n    component: Component,\n    ...rest\n  } = _ref;\n  return (\n    /*#__PURE__*/\n    // this route takes other route assigned to it from the App.js and return the same route if condition is met\n    _jsxDEV(Route, { ...rest,\n      render: props => {\n        // get cookie from browser if logged in\n        const token = cookies.get(\"TOKEN\"); // return route if there is a valid token set in the cookie\n\n        if (token) {\n          return /*#__PURE__*/_jsxDEV(Component, { ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 18\n          }, this);\n        } else {\n          // return the user to the landing page if there is no valid token set\n          return /*#__PURE__*/_jsxDEV(Redirect, {\n            to: {\n              pathname: \"/\",\n              state: {\n                // sets the location a user was about to assess before being redirected to login\n                from: props.location\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)\n  );\n}\n_c = ProtectedRoutes;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoutes\");","map":{"version":3,"names":["React","Route","Redirect","Cookies","cookies","ProtectedRoutes","component","Component","rest","props","token","get","pathname","state","from","location"],"sources":["/var/www/html/DashBoard/client/src/Components/authjwt/ProtectedRoute.js"],"sourcesContent":["// import React from \"react\";\n// import { Route, Navigate } from \"react-router-dom\";\n\n// const ProtectedRoute = ({ component: Component, ...rest }) => {\n//   function hasJWT() {\n//     let flag = false;\n\n//     //check user has JWT token\n//     localStorage.getItem(\"token\") ? (flag = true) : (flag = false);\n\n//     return flag;\n//   }\n\n//   return (\n//     <Route\n//       {...rest}\n//       render={(props) =>\n//         hasJWT() ? (\n//           <Component {...props} />\n//         ) : (\n//           <Navigate to={{ pathname: \"/\" }} />\n//         )\n//       }\n//     />\n//   );\n// };\n\n// export default ProtectedRoute;\n\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\n\n// receives component and any other props represented by ...rest\nexport default function ProtectedRoutes({ component: Component, ...rest }) {\n  return (\n\n    // this route takes other route assigned to it from the App.js and return the same route if condition is met\n    <Route\n      {...rest}\n      render={(props) => {\n        // get cookie from browser if logged in\n        const token = cookies.get(\"TOKEN\");\n\n        // return route if there is a valid token set in the cookie\n        if (token) {\n          return <Component {...props} />;\n        } else {\n          // return the user to the landing page if there is no valid token set\n          return (\n            <Redirect\n              to={{\n                pathname: \"/\",\n                state: {\n                  // sets the location a user was about to assess before being redirected to login\n                  from: props.location,\n                },\n              }}\n            />\n          );\n        }\n      }}\n    />\n  );\n}\n"],"mappings":";AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,OAAP,MAAoB,kBAApB;;AACA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB,C,CAEA;;AACA,eAAe,SAASE,eAAT,OAA4D;EAAA,IAAnC;IAAEC,SAAS,EAAEC,SAAb;IAAwB,GAAGC;EAA3B,CAAmC;EACzE;IAAA;IAEE;IACA,QAAC,KAAD,OACMA,IADN;MAEE,MAAM,EAAGC,KAAD,IAAW;QACjB;QACA,MAAMC,KAAK,GAAGN,OAAO,CAACO,GAAR,CAAY,OAAZ,CAAd,CAFiB,CAIjB;;QACA,IAAID,KAAJ,EAAW;UACT,oBAAO,QAAC,SAAD,OAAeD;UAAf;YAAA;YAAA;YAAA;UAAA,QAAP;QACD,CAFD,MAEO;UACL;UACA,oBACE,QAAC,QAAD;YACE,EAAE,EAAE;cACFG,QAAQ,EAAE,GADR;cAEFC,KAAK,EAAE;gBACL;gBACAC,IAAI,EAAEL,KAAK,CAACM;cAFP;YAFL;UADN;YAAA;YAAA;YAAA;UAAA,QADF;QAWD;MACF;IAvBH;MAAA;MAAA;MAAA;IAAA;EAHF;AA6BD;KA9BuBV,e"},"metadata":{},"sourceType":"module"}